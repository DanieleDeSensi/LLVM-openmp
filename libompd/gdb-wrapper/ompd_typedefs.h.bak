/*
 * ompd.h
 *
 *  Created on: Dec 22, 2014
 *      Author: Ignacio Laguna
 *              Joachim Protze
 *     Contact: ilaguna@llnl.gov
 *              protze@llnl.gov
 */
/******************************************************************************
 * This header file defines the OMPD interface: an interface to help debuggers
 * to inspect state associated with OpenMP programming abstractions in a target
 * process. The interface is implemented in a dynamically loaded library (DLL)
 * that the debugger loads into its address space.
 *
 * Name conventions:
 *    - All named entities start with the prefix "ompd_" (for OpenMP debugging)
 *    - Type entities end with the suffix "_t" (for type)
 *    - Function types end with the suffix "_fn_t" (for function type)
 *    - Return code entities have "_rc_" in it
 *    - Abstractions referring to the target have the prefix "t" (e.g.,
 *    "tmemory" for memory in the target, or "tsymbol" for symbol in the target)
 *    - Abstractions referring to the debugger have the prefix "d" (e.g.,
 *    "dmemory" for memory in the debugger)
 *
 * Comment conventions:
 *    - Input function parameters denoted by "IN:"
 *    - Output function parameters denoted by "OUT:"
 */
/******************************************************************************
 * General types and data structures
 */
/**
 * Basic types.
 */
/**
 * The following definitions match with ptx information stored in DWARF
 */
/*
 * Definition of OMPD states, taken from OMPT
 */
/**
 * Context handle.
 * This is used by the debugger to identify a target process (or core file).
 * This will be cast to concrete types within the debugger. The callbacks use
 * context handles to specify the debugger where to look up (since the debugger
 * can be handling different contexts at the same time, e.g., processes and/or
 * core files). Without context handles the debugger would not know the target
 * of a callback request.
 */
/**
 * OpenMP abstractions handles.
 * Each operation in the OMPD interface must explicitly specify a handle for the
 * context of the operation. OMPD uses context handles for OpenMP entities, such
 * as threads, parallel regions, and tasks. A handle for an entity is constant
 * while the entity itself is live.
 */
/**
 * Other handles.
 */
/**
 * Logical coordinates of OMP target device threads
 */
/**
 * Return codes.
 * Each OMPD operation returns a code.
 */
/**
 * Primitive types.
 */
/**
 * Primitive type sizes.
 * These types are used by OMPD to interrogate the debugger about the size of
 * primitive types in the target.
 */
/******************************************************************************
 * Debugger callback signatures.
 * These callback function signatures are used by OMPD to obtain state
 * information of a target process, in particular to interrogate about info
 * that is dependent on a particular OpenMP runtime library. Typical queries are
 * sizes of primitive types in the target, symbols lookup, lookup of offsets of
 * fields in a type/structure, and read/write to memory in the target.
 */
/**
 * Allocate memory in the debugger's address space.
 */
/**
 * Free memory in the debugger's address space.
 */
/**
 * Get thread specific context.
 */
/**
 * Get containing (host) process context for address_space_context
 */
/**
 * Look up the sizes of primitive types in the target
 */
/**
 * Look up the address of a global symbol in the target
 */
/**
 * Read memory from the target
 */
/**
 * Write memory from the target
 */
/**
 * This is used by the OMPD library to have the debugger print a string.
 * The OMPD should not print directly.
 */
/**
 * Callbacks table.
 */
/******************************************************************************
 * Call signatures from the debugger to the OMPD DLL.
 */
/* --- 4 Initialization ----------------------------------------------------- */

/**
 * The OMPD function ompd_get_version_string returns a descriptive string 
 * describing an implementation of the OMPD library. The function 
 * ompd_get_version_compatibility returns an integer code used to indicate the 
 * revision of the OMPD specification supported by an implementation of OMPD.
 */
typedef ompd_rc_t (*ompd_get_version_fn_t) ( 
    int *version 
    );
typedef ompd_rc_t (*ompd_get_version_string_fn_t) (
    const char **string                     /* OUT: OMPD version string */
    );
/**
 * Initialize OMPD.
 * This provides the DLL the pointers to the debugger's functions to obtain
 * information about the OpenMP runtime library. The debugger promises to
 * maintain the functions valid for as long as needed.
 */
typedef ompd_rc_t (*ompd_initialize_fn_t) (
    const ompd_callbacks_t *table /* IN: callbacks table */
    );
typedef ompd_rc_t (*ompd_process_initialize_fn_t) (
    ompd_address_space_context_t *context,    /* IN: debugger handle for the target */
    ompd_address_space_handle_t **addrhandle      /* OUT: ompd handle for the target */
    );
typedef ompd_rc_t (*ompd_release_address_space_handle_fn_t) (
    ompd_address_space_handle_t *addr_handle    /* IN: handle for the address space */
    );
typedef ompd_rc_t (*ompd_device_initialize_fn_t) (
    ompd_address_space_context_t *context,  /* IN: debugger handle for the device */
    ompd_device_identifier_t id,            /* IN: object defined by native device API */
    ompd_device_kind_t kind,                /* IN: */
    ompd_address_space_handle_t **addrhandle  /* OUT: ompd handle for the device */
    );
typedef ompd_rc_t (*ompd_finalize_fn_t) ( void );

/* --- 4 Handle Management -------------------------------------------------- */

/* --- 4.1 Thread Handles --------------------------------------------------- */

/**
 * Retrieve handles for all OpenMP threads. 
 * 
 * The ompd_get_threads operation enables the debugger to obtain handles for all 
 * OpenMP threads. A successful invocation of ompd_get_threads returns a pointer 
 * to a vector of handles in thread_handle_array and returns the number of 
 * handles in num_handles. This call yields meaningful results only if all 
 * OpenMP threads are stopped; otherwise, the OpenMP runtime may be creating 
 * and/or destroying threads during or after the call, rendering useless the 
 * vector of handles returned.
 */
typedef ompd_rc_t (*ompd_get_threads_fn_t) (
    ompd_address_space_handle_t *addr_handle,    /* IN: handle for the address space */
    ompd_thread_handle_t ***thread_handle_array, /* OUT: array of handles */
    int                     *num_handles    /* OUT: number of handles in the array */
    );
/**
 * Retrieve handles for OpenMP threads in a parallel region. 
 * 
 * The ompd_get_thread_in_parallel operation enables the debugger to obtain 
 * handles for all OpenMP threads associated with a parallel region. A 
 * successful invocation of ompd_get_thread_in_parallel returns a pointer to a 
 * vector of handles in thread_handle_array and returns the number of handles in 
 * num_handles. This call yields meaningful results only if all OpenMP threads 
 * in the parallel region are stopped; otherwise, the OpenMP runtime may be 
 * creating and/or destroying threads during or after the call, rendering 
 * useless the vector of handles returned.
 */
typedef ompd_rc_t (*ompd_get_thread_in_parallel_fn_t) (
    ompd_parallel_handle_t *parallel_handle,    /* IN */
    ompd_thread_handle_t ***thread_handle_array, /* OUT: array of handles */
    int *num_handles            /* OUT: number of handles in the array */
    );
typedef ompd_rc_t (*ompd_get_master_thread_in_parallel_fn_t) (
    ompd_parallel_handle_t *parallel_handle,    /* IN */
    ompd_thread_handle_t **thread_handle);
typedef ompd_rc_t (*ompd_release_thread_handle_fn_t) (
    ompd_thread_handle_t *thread_handle
);
typedef ompd_rc_t (*ompd_thread_handle_compare_fn_t) (
    ompd_thread_handle_t *thread_handle_1,
    ompd_thread_handle_t *thread_handle_2,
    int *cmp_value
);
typedef ompd_rc_t (*ompd_get_thread_handle_string_id_fn_t) (
    ompd_thread_handle_t *thread_handle,
    char **string_id
);
/* --- 4.2 Parallel Region Handles------------------------------------------- */

/**
 * Retrieve the handle for the innermost patallel region for an OpenMP thread.
 * 
 * The operation ompd_get_top_parallel_region enables the debugger to obtain 
 * the handle for the innermost parallel region associated with an OpenMP 
 * thread. This call is meaningful only if the thread whose handle is provided 
 * is stopped.
 */
typedef ompd_rc_t (*ompd_get_top_parallel_region_fn_t) (
    ompd_thread_handle_t *thread_handle, /* IN: OpenMP thread handle*/
    ompd_parallel_handle_t **parallel_handle /* OUT: OpenMP parallel handle */
    );
/**
 * Retrieve the handle for an enclosing parallel region.
 * 
 * The ompd_get_enclosing_parallel_handle operation enables the debugger to 
 * obtain the handle for the parallel region enclosing the parallel region 
 * specified by parallel_handle. This call is meaningful only if at least one 
 * thread in the parallel region is stopped.
 */
typedef ompd_rc_t (*ompd_get_enclosing_parallel_handle_fn_t) (
    ompd_parallel_handle_t *parallel_handle, /* IN: OpenMP parallel handle */
    ompd_parallel_handle_t **enclosing_parallel_handle /* OUT: OpenMP parallel handle */
    );
/**
 * Retrieve the handle for the enclosing parallel region or a task region.
 * 
 * The ompd_get_task_enclosing_parallel_handle operation enables the debugger to 
 * obtain the handle for the parallel region enclosing the task region 
 * specified by task_handle. This call is meaningful only if at least one 
 * thread in the parallel region is stopped.
 */
typedef ompd_rc_t (*ompd_get_task_enclosing_parallel_handle_fn_t) (
    ompd_task_handle_t* task_handle, /* IN: OpenMP task handle */
    ompd_parallel_handle_t **enclosing_parallel_handle /* OUT: OpenMP parallel handle */
    );
typedef ompd_rc_t (*ompd_release_parallel_handle_fn_t) (
    ompd_parallel_handle_t *parallel_handle
);
typedef ompd_rc_t (*ompd_parallel_handle_compare_fn_t) (
    ompd_parallel_handle_t *parallel_handle_1,
    ompd_parallel_handle_t *parallel_handle_2,
    int                    *cmp_value
);
typedef ompd_rc_t (*ompd_get_parallel_handle_string_id_fn_t) (
    ompd_parallel_handle_t *parallel_handle,
    char **string_id
);
/* --- 4.3 Task Handles ----------------------------------------------------- */

/**
 * Retrieve the handle for the innermost task for an OpenMP thread.
 * 
 * The debugger uses the operation ompd_get_top_task_region to obtain the handle
 * for the innermost task region associated with an OpenMP thread. This call is 
 * meaningful only if the thread whose handle is provided is stopped.
 */
typedef ompd_rc_t (*ompd_get_top_task_region_fn_t) (
    ompd_thread_handle_t* thread_handle,     /* IN: OpenMP thread handle*/
    ompd_task_handle_t **task_handle         /* OUT: OpenMP task handle */
    );
/**
 * Retrieve the handle for an enclosing task.
 * 
 * The debugger uses ompd_get_ancestor_task_region to obtain the handle for the 
 * task region enclosing the task region specified by task_handle. This call is 
 * meaningful only if the thread executing the task specified by task_handle is 
 * stopped.
 */
typedef ompd_rc_t (*ompd_get_ancestor_task_region_fn_t) (
    ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
    ompd_task_handle_t **parent_task_handle  /* OUT: OpenMP task handle */
    );
typedef ompd_rc_t (*ompd_get_generating_ancestor_task_region_fn_t) (
    ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
    ompd_task_handle_t **parent_task_handle  /* OUT: OpenMP task handle */
    );
typedef ompd_rc_t (*ompd_get_scheduling_ancestor_task_region_fn_t) (
    ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
    ompd_task_handle_t **parent_task_handle  /* OUT: OpenMP task handle */
    );
/**
 * Retrieve implicit task handle for a parallel region.
 * 
 * The ompd_get_implicit_task_in_parallel operation enables the debugger to 
 * obtain handles for implicit tasks associated with a parallel region. This 
 * call is meaningful only if all threads associated with the parallel region 
 * are stopped.
 */
typedef ompd_rc_t (*ompd_get_implicit_task_in_parallel_fn_t) (
    ompd_parallel_handle_t *parallel_handle, /* IN: OpenMP parallel handle */
    ompd_task_handle_t ***task_handle_array, /* OUT: array of OpenMP task handles */
    int *num_handles                        /* OUT: number of task handles */
    );
typedef ompd_rc_t (*ompd_release_task_handle_fn_t) (
    ompd_task_handle_t *task_handle
);
typedef ompd_rc_t (*ompd_task_handle_compare_fn_t) (
    ompd_task_handle_t *task_handle_1,
    ompd_task_handle_t *task_handle_2,
    int                *cmp_value
);
typedef ompd_rc_t (*ompd_get_task_handle_string_id_fn_t) (
    ompd_task_handle_t *task_handle,
    char **string_id
);
/* --- 5o Process and Thread Settings ---------------------------------------- */

/**
 * The functions ompd_get_num_procs and ompd_get_thread_limit are third-party 
 * versions of the OpenMP runtime functions omp_get_num_procs and 
 * omp_get_thread_limit.
 */
typedef ompd_rc_t (*ompd_get_num_procs_fn_t) (
    ompd_address_space_handle_t *addr_handle,    /* IN: handle for the address space */
    ompd_word_t *val                       /* OUT: number of processes */
    );
typedef ompd_rc_t (*ompd_get_thread_limit_fn_t) (
    ompd_address_space_handle_t *addr_handle,    /* IN: handle for the address space */
    ompd_word_t *val                       /* OUT: max number of threads */
    );
  /* --- 6 Parallel Region Inqueries ------------------------------------------ */
  /* --- 6.1 Settings --------------------------------------------------------- */
  /**
   * Determine the number of threads associated with a parallel region.
   */
  typedef ompd_rc_t (*ompd_get_num_threads_fn_t) (
      ompd_parallel_handle_t *parallel_handle, /* IN: OpenMP parallel handle */
      ompd_word_t *val                       /* OUT: number of threads */
      );
  /**
   * Determine the nesting depth of a particular parallel region instance.
   */
  typedef ompd_rc_t (*ompd_get_level_fn_t) (
      ompd_parallel_handle_t *parallel_handle, /* IN: OpenMP parallel handle */
      ompd_word_t *val                       /* OUT: nesting level */
      );
  /**
   * Determine the number of enclosing active parallel regions. 
   * 
   * ompd_get_active_level returns the number of nested, active parallel regions 
   * enclosing the parallel region specified by its handle.
   */
  typedef ompd_rc_t (*ompd_get_active_level_fn_t) (
      ompd_parallel_handle_t *parallel_handle, /* IN: OpenMP parallel handle */
      ompd_word_t *val                       /* OUT: active nesting level */
      );
  /* --- 6.2 OMPT Parallel Region Inquiry Analogues ------------------------- */

  /* --- 7 Thread Inquiry ----------------------------------------------------- */
  /* --- 7.1 Operating System Thread Inquiry ---------------------------------- */
  /**
   * Obtain an OpenMP thread handle and the internal OS thread handle for the 
   * selected (context) thread.
   * If the function returns ompd_rc_ok then the operating system thread
   * corresponds to an OpenMP thread and the thread_handle is initialized. The
   * value of thread_handle ans os_thread is meaningful only to the OpenMP runtime 
   * system.
   */
  typedef ompd_rc_t (*ompd_get_thread_handle_fn_t) (
      ompd_address_space_handle_t *addr_handle,    /* IN: handle for the address space */
      ompd_thread_id_kind_t         kind,
      ompd_size_t                  sizeof_osthread,
      const void*                  osthread,
      ompd_thread_handle_t       **thread_handle     /* OUT: OpenMP thread handle*/
      );
  /**
   * Obtain the OS thread handle for an OpenMP thread handle.
   * this might change over time in case virtual openmp threads migrate between 
   * OS threads.
   */
  typedef ompd_rc_t (*ompd_get_osthread_fn_t) (
      ompd_thread_handle_t *thread_handle,     /* IN: OpenMP thread handle*/
      ompd_thread_id_kind_t  kind,
      ompd_size_t           sizeof_osthread,
      void                 *osthread
      );
  typedef ompd_rc_t (*ompd_get_thread_num_fn_t) (
      ompd_thread_handle_t* thread_handle,     /* IN: OpenMP thread handle*/
      ompd_word_t *val                    /* OUT: number of the thread within the team */   
      );
  /* --- 7.2 OMPT Thread State Inquiry Analogue ------------------------------- */

  /**
   * Get the state of a thread. This can use OMPT state data structure to define
   * different states of threads (e.g., idle, working, or barrier, etc) and what
   * entity cased this state (e.g., address of a lock);
   * 
   * The function ompd_get_state is a third-party version of ompt_get_state. The 
   * only difference between the OMPD and OMPT counterparts is that the OMPD 
   * version must supply a thread handle to provide a context for this inquiry.
   */
  typedef ompd_rc_t (*ompd_get_state_fn_t) (
      ompd_thread_handle_t *thread_handle,     /* IN: OpenMP thread handle*/
      ompd_word_t *state,                    /* OUT: State of this thread */
      ompd_wait_id_t *wait_id                 /* OUT: Wait ID */
  );
  /* --- 8 Task Inquiry ------------------------------------------------------- */

  /* --- 8.1 Task Function Entry Point ---------------------------------------- */

  /**
   * The ompd_get_task_function returns the entry point of the code that 
   * corresponds to the body of code executed by the task.
   */
  typedef ompd_rc_t (*ompd_get_task_function_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_address_t *entry_point /* OUT: first instruction in the task region */
      );
  /* --- 8.2 Task Settings ---------------------------------------------------- */

  /**
   * Retrieve information from OpenMP tasks. These inquiry functions have no 
   * counterparts in the OMPT interface as a first-party tool can call OpenMP 
   * runtime inquiry functions directly. The only difference between the OMPD 
   * inquiry operations and their counterparts in the OpenMP runtime is that the 
   * OMPD version must supply a task handle to provide a context for each inquiry.
   */
  typedef ompd_rc_t (*ompd_get_max_threads_fn_t) (  
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_word_t *val                                /* OUT: max number of threads */
      );
  typedef ompd_rc_t (*ompd_in_parallel_fn_t) ( 
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_word_t *val                                /* OUT: Is OpenMP in parallel? */
      );
  typedef ompd_rc_t (*ompd_in_final_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_word_t *val                                /* OUT: Is OpenMP in final? */
      );
  typedef ompd_rc_t (*ompd_get_dynamic_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_word_t *val                                /* OUT: ? */
      );
  typedef ompd_rc_t (*ompd_get_nested_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
      ompd_word_t *val                                /* OUT: Is this task nested? */
      );
  typedef ompd_rc_t (*ompd_get_max_active_levels_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
      ompd_word_t *val                                /* OUT: max active levels */
      );
#if 0
  typedef ompd_rc_t (*ompd_get_schedule_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_sched_t *kind,                      /* OUT: Kind of OpenMP schedule*/
      ompd_word_t *modifier                           /* OUT: Schedunling modifier */
      );
#endif
  typedef ompd_rc_t (*ompd_get_proc_bind_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_proc_bind_t *bind                   /* OUT: Kind of proc-binding */
      );
  typedef ompd_rc_t (*ompd_is_implicit_fn_t) (
      ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
      ompd_word_t *val                                /* OUT: implicit=1, explicit=0 */  
    );
/* --- 8.3 OMPT Task Inquiry Analogues -------------------------------------- */

/**
 * The functions defined here are third-party versions of ompt_get_task_frame 
 * and ompt_get_task_id. The only difference between the OMPD and OMPT 
 * counterparts is that the OMPD version must supply a task handle to provide a 
 * context for these inquiries.
 */
/**
 * sp_exit 
 * 
 * This value is set once, the first time that a task exits the runtime to begin 
 * executing user code. This field points to the stack frame of the runtime 
 * procedure that called the user code. This value is NULL until just before the 
 * task exits the runtime.
 * 
 * sp_reentry
 *
 * This value is set each time that current task re-enters the runtime to create 
 * new (implicit or explicit) tasks. This field points to the stack frame of the 
 * runtime procedure called by a task to re-enter the runtime. This value is NULL 
 * until just after the task re-enters the runtime.
 */
typedef ompd_rc_t (*ompd_get_task_frame_fn_t) (
    ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle*/
    ompd_address_t *sp_exit,                   /* OUT: next frame is user code */
    ompd_address_t *sp_reentry                 /* OUT: previous frame is user code */
    );
#if 0
typedef ompd_rc_t (*ompd_get_task_id_fn_t) (
    ompd_task_handle_t *task_handle,         /* IN: OpenMP task handle */
    ompd_task_id_t *task_id                 /* OUT: OpenMP task ID */
    );
#endif
/* --- 13 Display Control Variables ----------------------------------------- */

/**
 * Using the ompd_display_control_vars function, the debugger can extract a 
 * string that contains a sequence of name/value pairs of control variables 
 * whose settings are (a) user controllable, and (b) important to the operation 
 * or performance of an OpenMP runtime system. The control variables exposed 
 * through this interface will include all of the OMP environment variables, 
 * settings that may come from vendor or platform- specific environment 
 * variables (e.g., the IBM XL compiler has an environment variable that 
 * controls spinning vs. blocking behavior), and other settings that affect 
 * the operation or functioning of an OpenMP runtime system (e.g., numactl 
 * settings that cause threads to be bound to cores).
 */
typedef ompd_rc_t (*ompd_get_display_control_vars_fn_t) (
  ompd_address_space_handle_t *handle, /* IN */
  const char * const **control_var_values /* OUT */
);
typedef ompd_rc_t (*ompd_release_display_control_vars_fn_t) (
  const char * const **control_var_values /* IN */
);
